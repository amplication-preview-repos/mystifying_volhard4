/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerOrder as PrismaCustomerOrder,
  Montir as PrismaMontir,
  Service as PrismaService,
  Status as PrismaStatus,
  User as PrismaUser,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class CustomerOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerOrderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerOrder.count(args);
  }

  async customerOrders<T extends Prisma.CustomerOrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerOrderFindManyArgs>
  ): Promise<PrismaCustomerOrder[]> {
    return this.prisma.customerOrder.findMany<Prisma.CustomerOrderFindManyArgs>(
      args
    );
  }
  async customerOrder<T extends Prisma.CustomerOrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerOrderFindUniqueArgs>
  ): Promise<PrismaCustomerOrder | null> {
    return this.prisma.customerOrder.findUnique(args);
  }
  async createCustomerOrder<T extends Prisma.CustomerOrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerOrderCreateArgs>
  ): Promise<PrismaCustomerOrder> {
    return this.prisma.customerOrder.create<T>(args);
  }
  async updateCustomerOrder<T extends Prisma.CustomerOrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerOrderUpdateArgs>
  ): Promise<PrismaCustomerOrder> {
    return this.prisma.customerOrder.update<T>(args);
  }
  async deleteCustomerOrder<T extends Prisma.CustomerOrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CustomerOrderDeleteArgs>
  ): Promise<PrismaCustomerOrder> {
    return this.prisma.customerOrder.delete(args);
  }

  async getMontir(parentId: string): Promise<PrismaMontir | null> {
    return this.prisma.customerOrder
      .findUnique({
        where: { id: parentId },
      })
      .montir();
  }

  async getService(parentId: string): Promise<PrismaService | null> {
    return this.prisma.customerOrder
      .findUnique({
        where: { id: parentId },
      })
      .service();
  }

  async getStatus(parentId: string): Promise<PrismaStatus | null> {
    return this.prisma.customerOrder
      .findUnique({
        where: { id: parentId },
      })
      .status();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.customerOrder
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getVehicle(parentId: string): Promise<PrismaVehicle | null> {
    return this.prisma.customerOrder
      .findUnique({
        where: { id: parentId },
      })
      .vehicle();
  }
}
