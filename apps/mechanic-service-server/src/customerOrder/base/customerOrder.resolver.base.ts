/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerOrder } from "./CustomerOrder";
import { CustomerOrderCountArgs } from "./CustomerOrderCountArgs";
import { CustomerOrderFindManyArgs } from "./CustomerOrderFindManyArgs";
import { CustomerOrderFindUniqueArgs } from "./CustomerOrderFindUniqueArgs";
import { CreateCustomerOrderArgs } from "./CreateCustomerOrderArgs";
import { UpdateCustomerOrderArgs } from "./UpdateCustomerOrderArgs";
import { DeleteCustomerOrderArgs } from "./DeleteCustomerOrderArgs";
import { Montir } from "../../montir/base/Montir";
import { Service } from "../../service/base/Service";
import { Status } from "../../status/base/Status";
import { User } from "../../user/base/User";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { CustomerOrderService } from "../customerOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerOrder)
export class CustomerOrderResolverBase {
  constructor(
    protected readonly service: CustomerOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "read",
    possession: "any",
  })
  async _customerOrdersMeta(
    @graphql.Args() args: CustomerOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerOrder])
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "read",
    possession: "any",
  })
  async customerOrders(
    @graphql.Args() args: CustomerOrderFindManyArgs
  ): Promise<CustomerOrder[]> {
    return this.service.customerOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "read",
    possession: "own",
  })
  async customerOrder(
    @graphql.Args() args: CustomerOrderFindUniqueArgs
  ): Promise<CustomerOrder | null> {
    const result = await this.service.customerOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerOrder)
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "create",
    possession: "any",
  })
  async createCustomerOrder(
    @graphql.Args() args: CreateCustomerOrderArgs
  ): Promise<CustomerOrder> {
    return await this.service.createCustomerOrder({
      ...args,
      data: {
        ...args.data,

        montir: args.data.montir
          ? {
              connect: args.data.montir,
            }
          : undefined,

        service: args.data.service
          ? {
              connect: args.data.service,
            }
          : undefined,

        status: args.data.status
          ? {
              connect: args.data.status,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerOrder)
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "update",
    possession: "any",
  })
  async updateCustomerOrder(
    @graphql.Args() args: UpdateCustomerOrderArgs
  ): Promise<CustomerOrder | null> {
    try {
      return await this.service.updateCustomerOrder({
        ...args,
        data: {
          ...args.data,

          montir: args.data.montir
            ? {
                connect: args.data.montir,
              }
            : undefined,

          service: args.data.service
            ? {
                connect: args.data.service,
              }
            : undefined,

          status: args.data.status
            ? {
                connect: args.data.status,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerOrder)
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerOrder(
    @graphql.Args() args: DeleteCustomerOrderArgs
  ): Promise<CustomerOrder | null> {
    try {
      return await this.service.deleteCustomerOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Montir, {
    nullable: true,
    name: "montir",
  })
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "read",
    possession: "any",
  })
  async getMontir(
    @graphql.Parent() parent: CustomerOrder
  ): Promise<Montir | null> {
    const result = await this.service.getMontir(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Service, {
    nullable: true,
    name: "service",
  })
  @nestAccessControl.UseRoles({
    resource: "Service",
    action: "read",
    possession: "any",
  })
  async getService(
    @graphql.Parent() parent: CustomerOrder
  ): Promise<Service | null> {
    const result = await this.service.getService(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Status, {
    nullable: true,
    name: "status",
  })
  @nestAccessControl.UseRoles({
    resource: "Status",
    action: "read",
    possession: "any",
  })
  async getStatus(
    @graphql.Parent() parent: CustomerOrder
  ): Promise<Status | null> {
    const result = await this.service.getStatus(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(@graphql.Parent() parent: CustomerOrder): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async getVehicle(
    @graphql.Parent() parent: CustomerOrder
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
