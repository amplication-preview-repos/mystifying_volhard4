/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Montir } from "./Montir";
import { MontirCountArgs } from "./MontirCountArgs";
import { MontirFindManyArgs } from "./MontirFindManyArgs";
import { MontirFindUniqueArgs } from "./MontirFindUniqueArgs";
import { CreateMontirArgs } from "./CreateMontirArgs";
import { UpdateMontirArgs } from "./UpdateMontirArgs";
import { DeleteMontirArgs } from "./DeleteMontirArgs";
import { CustomerOrderFindManyArgs } from "../../customerOrder/base/CustomerOrderFindManyArgs";
import { CustomerOrder } from "../../customerOrder/base/CustomerOrder";
import { MontirService } from "../montir.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Montir)
export class MontirResolverBase {
  constructor(
    protected readonly service: MontirService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "read",
    possession: "any",
  })
  async _montirsMeta(
    @graphql.Args() args: MontirCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Montir])
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "read",
    possession: "any",
  })
  async montirs(@graphql.Args() args: MontirFindManyArgs): Promise<Montir[]> {
    return this.service.montirs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Montir, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "read",
    possession: "own",
  })
  async montir(
    @graphql.Args() args: MontirFindUniqueArgs
  ): Promise<Montir | null> {
    const result = await this.service.montir(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Montir)
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "create",
    possession: "any",
  })
  async createMontir(@graphql.Args() args: CreateMontirArgs): Promise<Montir> {
    return await this.service.createMontir({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Montir)
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "update",
    possession: "any",
  })
  async updateMontir(
    @graphql.Args() args: UpdateMontirArgs
  ): Promise<Montir | null> {
    try {
      return await this.service.updateMontir({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Montir)
  @nestAccessControl.UseRoles({
    resource: "Montir",
    action: "delete",
    possession: "any",
  })
  async deleteMontir(
    @graphql.Args() args: DeleteMontirArgs
  ): Promise<Montir | null> {
    try {
      return await this.service.deleteMontir(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerOrder], { name: "customerOrders" })
  @nestAccessControl.UseRoles({
    resource: "CustomerOrder",
    action: "read",
    possession: "any",
  })
  async findCustomerOrders(
    @graphql.Parent() parent: Montir,
    @graphql.Args() args: CustomerOrderFindManyArgs
  ): Promise<CustomerOrder[]> {
    const results = await this.service.findCustomerOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
