/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Mechanic as PrismaMechanic } from "@prisma/client";

export class MechanicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MechanicCountArgs, "select">): Promise<number> {
    return this.prisma.mechanic.count(args);
  }

  async mechanics<T extends Prisma.MechanicFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MechanicFindManyArgs>
  ): Promise<PrismaMechanic[]> {
    return this.prisma.mechanic.findMany<Prisma.MechanicFindManyArgs>(args);
  }
  async mechanic<T extends Prisma.MechanicFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MechanicFindUniqueArgs>
  ): Promise<PrismaMechanic | null> {
    return this.prisma.mechanic.findUnique(args);
  }
  async createMechanic<T extends Prisma.MechanicCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MechanicCreateArgs>
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.create<T>(args);
  }
  async updateMechanic<T extends Prisma.MechanicUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MechanicUpdateArgs>
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.update<T>(args);
  }
  async deleteMechanic<T extends Prisma.MechanicDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MechanicDeleteArgs>
  ): Promise<PrismaMechanic> {
    return this.prisma.mechanic.delete(args);
  }
}
